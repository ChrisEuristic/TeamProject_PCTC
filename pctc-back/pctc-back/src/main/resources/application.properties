
## 소셜로그인 설정을 위한 properties
#spring.security.oauth2.client.registration.google.client-id=구글 클라이언트 ID
#spring.security.oauth2.client.registration.google.client-secret=구글 클라이언트 Secret
#spring.security.oauth2.client.registration.google.scope=profile,email
#
#spring.security.oauth2.client.registration.naver.client-id=네이버 클라이언트 ID
#spring.security.oauth2.client.registration.naver.client-secret=네이버 클라이언트 Secret
#spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
#spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.naver.scope=name,email,profile_image
#spring.security.oauth2.client.registration.naver.client-name=Naver
#
spring.security.oauth2.client.registration.kakao.client-id=5c0b05d38fb9dd6832bf2510a306f4ba
spring.security.oauth2.client.registration.kakao.client-secret=2luqVNK9t5t4DHsm7ZxMiIEsDCbWIETP
spring.security.oauth2.client.registration.kakao.redirect-uri=http://10.125.121.222:8080/auth/authorization/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname
#spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
#spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
#spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
#spring.security.oauth2.client.provider.naver.user-name-attribute=response
#
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# H2인 경우
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:tcp://localhost/~/PCTC
spring.datasource.username=sa
spring.datasource.password=123

#############################################################################################
## JPA Setting
#
# 테이블 옵션
#  update : 기존의 스키마를 유지하며 JPA에 의해 변경된 부분만 추가한다.
#  validate : 엔티티와 테이블이 정상적으로 매핑되어있는지만 검증한다. ==> 운영 서버에서 사용
#  create : 기존에 존재하는 스키마를 삭제하고 새로 생성한다.
#  create-drop : 스키마를 생성하고 애플리케이션이 종료될 때 삭제한다.
#  none : 초기화 동작을 하지 않는다.
spring.jpa.hibernate.ddl-auto=update
# DDL 생성 시 데이터베이스의 고유 기능을 사용할지
spring.jpa.generate-ddl=false
# JPA가 생성한 Query를 보여준다.
spring.jpa.show-sql=true
# JPA가 생성한 Query를 보기 좋게 보여준다.
spring.jpa.properties.hibernate.format_sql=true
# JPA가 사용할 dialect 설정
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect

#############################################################################################
## Logging Setting
#
# 로그 수준 설정
logging.level.org.hibernate=info
# hibernate가 보여주는 로그에 있는 ?에 어떤 값이 들어갔는지 알고싶을 때
logging.level.org.hibernate.type.descriptor.sql=trace

#필터체인에서 문제가 생겼을떄의 디버그 활성화
logging.level.org.springframework.security.web.FilterChainProxy=DEBUG



spring.main.banner-mode=off